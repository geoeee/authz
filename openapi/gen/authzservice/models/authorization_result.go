// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AuthorizationResult authorization result
// swagger:model AuthorizationResult
type AuthorizationResult struct {

	// allow
	Allow bool `json:"allow,omitempty"`

	// permitted companies
	PermittedCompanies []string `json:"permitted_companies"`

	// permitted stores
	PermittedStores []*AuthorizationResultPermittedStoresItems0 `json:"permitted_stores"`
}

// Validate validates this authorization result
func (m *AuthorizationResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermittedStores(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationResult) validatePermittedStores(formats strfmt.Registry) error {

	if swag.IsZero(m.PermittedStores) { // not required
		return nil
	}

	for i := 0; i < len(m.PermittedStores); i++ {
		if swag.IsZero(m.PermittedStores[i]) { // not required
			continue
		}

		if m.PermittedStores[i] != nil {
			if err := m.PermittedStores[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permitted_stores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationResult) UnmarshalBinary(b []byte) error {
	var res AuthorizationResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AuthorizationResultPermittedStoresItems0 authorization result permitted stores items0
// swagger:model AuthorizationResultPermittedStoresItems0
type AuthorizationResultPermittedStoresItems0 struct {

	// company id
	CompanyID string `json:"company_id,omitempty"`

	// store ids
	StoreIds []string `json:"store_ids"`
}

// Validate validates this authorization result permitted stores items0
func (m *AuthorizationResultPermittedStoresItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationResultPermittedStoresItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationResultPermittedStoresItems0) UnmarshalBinary(b []byte) error {
	var res AuthorizationResultPermittedStoresItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
